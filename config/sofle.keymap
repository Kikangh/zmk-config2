/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEFAULT 0
#define LOWER   1
#define RAISE   2
#define ARROW   3
#define NUMBER  4
#define SCREEN  5

&kscan0 { debounce-period = <20>; };

/ {
    combos {
        compatible = "zmk,combos";
        combo_ret {
            timeout-ms = <50>;
            key-positions = <30 44>;
            bindings = <&kp RET>;
        };
        combo_bspc {
            timeout-ms = <50>;
            key-positions = <19 31>;
            bindings = <&kp BSPC>;
        };
        combo_del {
            timeout-ms = <50>;
            key-positions = <18 30>;
            bindings = <&kp DEL>;
        };
        combo_w {
            timeout-ms = <50>;
            key-positions = <31 45>;
            bindings = <&kp RBKT>;
        };
        combo_z {
            timeout-ms = <50>;
            key-positions = <20 32>;
            bindings = <&kp LBKT>;
        };
        combo_arrow {
            timeout-ms = <50>;
            key-positions = <38 39 40>;
            bindings = <&to ARROW>;
        };
        combo_cut {
            timeout-ms = <50>;
            key-positions = <14 26>;
            bindings = <&kp LG(C)>;
        };
        combo_copy {
            timeout-ms = <50>;
            key-positions = <15 27>;
            bindings = <&kp LG(H)>;
        };
        combo_paste {
            timeout-ms = <50>;
            key-positions = <16 28>;
            bindings = <&kp LG(U)>;
        };
        combo_paste_without_format {
            timeout-ms = <50>;
            key-positions = <17 29>;
            bindings = <&kp LG(LA(LS(U)))>;
        };
    };
};

// ------------------------------------------------------------------------------------------------------------
// |  0    |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   10  |   11  |
// |  12   | 13  |  14 | 15   | 16   |  17  |                   |  18  |  19   |  20   |  21  |   22  |   23  |
// |  24   | 25  |  26 | 27   | 28   |  29  |                   |  30  |  31   |  32   |  33  |   34  |   35  |
// |   36  | 37  |  38 | 39   | 40   |  41  |    42  |  |  43   |  44  |  45   |  46   |  47  |   48  |   49  |
//               |  50 |  51  |  52  |  53  |    54  |  |   55  |  56  |  57   |  58   |  59  |


/ {
    behaviors {
        hm1: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS1";
            #binding-cells = <2>;
            tapping-term-ms = <260>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        hm2: homerow_mods2 {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS2";
            #binding-cells = <2>;
            tapping-term-ms = <260>;
            quick_tap_ms = <0>;
            flavor = "hold-preferred";
            bindings = <&kp>, <&kp>;
        };
        ht: homerow_layertap {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_LAYERTAP";
            #binding-cells = <2>;
            tapping-term-ms = <260>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
// ------------------------------------------------------------------------------------------------------------
// |  `    |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   | BKSPC |
// |  ESC  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   Z   |
// |  TAB  |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
// | SHIFT |  Z  |  X  |  C   |  V   |  B   |  MUTE  |  |       |  N   |  M    |  ,    |  .   |   /   | SHIFT |
//               | GUI | ALT  | CTRL | LOWER|  ENTER |  | SPACE | RAISE| CTRL  | ALT   | GUI  |
            bindings = <
&kp ESC         &kp N1       &kp N2       &kp N3      &kp N4               &kp N5                                             &kp N6     &kp N7        &kp N8     &kp N9      &kp N0   &kp BSPC
&kp TAB         &kp Q        &kp W        &kp E       &kp R                &kp T                                              &kp Y      &kp U         &kp I      &kp O       &kp P    &kp BSPC
&hm2 LSHFT TAB  &ht ARROW A  &hm1 LCTRL S  &hm1 LALT D  &hm1 LGUI F           &kp G                                              &kp H      &hm1 RGUI J    &hm1 RALT K &hm1 RCTRL L &kp SEMI &kp SQT
&kp F3          &kp Z        &kp X        &kp C       &kp V                &lt SCREEN B   &kp C_MUTE         &kp C_MUTE       &kp N      &kp M         &kp COMMA  &kp DOT     &kp FSLH &kp BSLH
                             &kp LGUI     &kp LALT    &lt 1 LG(LA(H))      &mt LSHFT RET  &mt LGUI SPACE     &lt NUMBER SPACE &lt 2 RBKT &kp RC(SPACE) &kp RALT   &kp RCTL
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        lower_layer {
// TODO: Some binds are waiting for shifted keycode support.
// ------------------------------------------------------------------------------------------------------------
// |       |  F1 |  F2 |  F3  |  F4  |  F5  |                   |  F6  |  F7   |  F8   |  F9  |  F10  |  F11  |
// | `     |   1 |   2 |   3  |   4  |   5  |                   |   6  |   7   |   8   |   9  |    0  |  F12  |
// |       |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   |   |
// |       |  =  |  -  |  +   |  {   |  }   |        |  |       |  [   |  ]    |  ;    |  :   |   \   |       |
//               |     |      |      |      |        |  |       |      |       |       |      |
            bindings = <
&trans   &kp F1            &kp F2    &kp F3           &kp F4       &kp F5                       &kp F6            &kp F7               &kp F8                &kp F9               &kp F10                      &kp F11
&kp F6   &kp F7            &kp F8    &kp F9           &kp F10      &kp F11                      &kp LA(LC(LS(Y))) &kp LA(LC(LS(U)))    &kp LA(LC(LS(I)))     &kp LA(LC(LS(O)))    &none                        &kp F12
&kp CAPS &kp LG(LA(LS(U))) &kp LG(C) &kp LG(H)        &kp LG(U)    &kp F12                      &kp LA(LC(LS(H))) &kp LA(LC(LS(LEFT))) &kp LA(LC(LS(UP)))    &kp LA(LC(LS(DOWN))) &hm1 RSHFT LA(LC(LS(RIGHT)))  &none
&kp F10  &none             &none     &none            &none        &kp LG(F12)  &trans   &trans &kp LA(LC(LS(N))) &kp LC(LG(M))        &kp LA(LC(LS(COMMA))) &kp LA(LC(LS(DOT)))  &kp RG(RS(FSLH))             &kp LA(LC(LG(J)))
                           &trans    &trans           &trans       &trans       &trans   &trans &trans            &trans               &trans                &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        raise_layer {
// ----------------------------------------------------------------------------------------------------------
// |BTCLR| BT1  | BT2  |  BT3  |  BT4  |  BT5 |                |      |      |       |      |       |       |
// |     | INS  | PSCR | GUI   |       |      |                | PGUP |      |   ^   |      |       |       |
// |     | ALT  | CTRL | SHIFT |       | CAPS |                | PGDN |   <- |   v   |  ->  |  DEL  | BKSPC |
// |     | UNDO | CUT  | COPY  | PASTE |      |      |  |      |      |      |       |      |       |       |
//              |      |       |       |      |      |  |      |      |      |       |      |
            bindings = <
&trans                &kp LA(LG(ESC))       &trans       &trans     &trans        &trans                                        &trans    &trans      &trans   &trans          &trans         &trans
&trans                &kp LA(LC(LG(LS(R)))) &kp LG(LEFT) &kp LG(UP) &kp LG(RIGHT) &kp LA(LC(LS(SPACE)))                         &none     &none       &none    &kp LG(SQT)     &kp C_VOL_UP   &trans
&kp LA(LC(LG(LS(R)))) &kp RA(RG(G))         &kp LG(C)    &kp LG(H)  &kp LG(U)     &kp LC(LS(SPACE))                             &kp PG_UP &kp LS(TAB) &kp TAB  &kp LG(LS(SQT)) &kp C_VOL_DN   &kp LA(LG(SEMI))
&trans                &kp LC(F)             &kp HOME     &kp LG(UP) &kp END       &kp LC(LG(SPACE))   &trans            &trans  &kp PG_DN &trans      &trans   &trans          &kp C_MUTE     &trans
                                            &trans       &trans     &trans        &trans              &kp LG(LA(LS(U))) &trans  &trans    &trans      &trans   &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        arrow_layer {
// TODO: Some binds are waiting for shifted keycode support.
// ------------------------------------------------------------------------------------------------------------
// |       |  F1 |  F2 |  F3  |  F4  |  F5  |                   |  F6  |  F7   |  F8   |  F9  |  F10  |  F11  |
// | `     |   1 |   2 |   3  |   4  |   5  |                   |   6  |   7   |   8   |   9  |    0  |  F12  |
// |       |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   |   |
// |       |  =  |  -  |  +   |  {   |  }   |        |  |       |  [   |  ]    |  ;    |  :   |   \   |       |
//               |     |      |      |      |        |  |       |      |       |       |      |
            bindings = <
&to 0  &none  &none      &none            &none                 &kp DEL                                 &none          &none             &none            &none            &none            &kp BSPC
&none  &none  &kp LC(N1) &kp LC(N2)       &kp LG(LS(SQT))       &kp BSPC                                &kp N6         &kp LA(LG(LS(V))) &kp LC(LS(TAB))  &kp LC(TAB)      &none            &kp BSPC
&none  &trans &kp LCTRL  &kp LALT         &kp LGUI              &kp LS(LA(LG(SPACE)))                   &kp TILDE      &kp LEFT          &kp UP           &kp DOWN         &kp RIGHT        &kp HOME
&reset &none  &none      &kp LG(LS(LBKT)) &kp LG(LBKT)          &kp LG(TAB)           &trans     &trans &kp LS(N)      &kp GRAVE         &kp RG(RS(UP))   &kp RG(RS(DOWN)) &kp RG(LS(FSLH)) &kp RA(RC(RG(J)))
              &trans     &trans           &kp LG(LA(H))         &trans                &trans     &trans &kp LC(LS(N9)) &kp LC(LS(N0))    &trans           &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        number_layer {
// TODO: Some binds are waiting for shifted keycode support.
// ------------------------------------------------------------------------------------------------------------
// |       |  F1 |  F2 |  F3  |  F4  |  F5  |                   |  F6  |  F7   |  F8   |  F9  |  F10  |  F11  |
// | `     |   1 |   2 |   3  |   4  |   5  |                   |   6  |   7   |   8   |   9  |    0  |  F12  |
// |       |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   |   |
// |       |  =  |  -  |  +   |  {   |  }   |        |  |       |  [   |  ]    |  ;    |  :   |   \   |       |
//               |     |      |      |      |        |  |       |      |       |       |      |
            bindings = <
&trans    &trans    &trans    &trans    &trans    &trans                       &trans    &trans    &trans    &trans    &trans    &trans
&trans    &kp N1    &kp N2    &kp N3    &kp N4    &kp N5                       &kp N6    &kp N7    &kp N8    &kp N9    &kp N0    &kp BSPC
&kp LSHFT &kp KP_N1 &kp KP_N2 &kp KP_N3 &kp KP_N4 &kp KP_N5                    &kp KP_N6 &kp KP_N7 &kp KP_N8 &kp KP_N9 &kp KP_N0 &kp MINUS
&kp F10   &kp GRAVE &kp LS(G) &kp LS(V) &trans    &kp LA(E)    &trans   &trans &kp G     &none     &none     &trans    &none     &kp EQUAL
                    &trans    &trans    &kp LCTRL &mt LALT RET &trans   &trans &kp RGUI  &kp RALT  &kp RCTRL &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

         screen_layer {
// TODO: Some binds are waiting for shifted keycode support.
// ------------------------------------------------------------------------------------------------------------
// |       |  F1 |  F2 |  F3  |  F4  |  F5  |                   |  F6  |  F7   |  F8   |  F9  |  F10  |  F11  |
// | `     |   1 |   2 |   3  |   4  |   5  |                   |   6  |   7   |   8   |   9  |    0  |  F12  |
// |       |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   |   |
// |       |  =  |  -  |  +   |  {   |  }   |        |  |       |  [   |  ]    |  ;    |  :   |   \   |       |
//               |     |      |      |      |        |  |       |      |       |       |      |
            bindings = <
&none &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4                 &trans          &trans             &trans         &trans           &trans             &trans
&none &none        &none        &none        &none        &none                        &kp LC(LS(O))   &kp C_PREV         &kp C_PP       &kp C_NEXT       &trans             &trans
&none &none        &none        &none        &none        &none                        &kp LC(LS(S))   &kp LG(LC(LS(N4))) &kp LG(LS(N4)) &kp LG(LS(N3))   &kp LG(LC(LS(N4))) &trans
&none &none        &none        &none        &none        &trans       &trans   &trans &kp LG(LS(SQT)) &kp LC(LS(N9))     &kp RG(RS(UP)) &kp RG(RS(DOWN)) &kp LC(LS(N0))     &trans
                   &none        &none        &bt BT_CLR   &none        &none    &trans &trans          &trans             &trans         &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };
   };
};
